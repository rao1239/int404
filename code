import pathlib
import csv
# Let's start by defines variables
subjects_lis t = []
start_hour = 8 # school start at 8.am
next_hour = 9 # 1rst next hour is 9.am
school_days = [
'
'
time_slot_list = [] # get list of time slot
subject_per_slot = {}
MAX_HOUR_PER_SUBJECT = 6 # use capital letter because it's a
constant variable
subject_hour_count = {}
def fill_in_subjects_list():
"""Ask user subjects and fill in subjects
enter_another_subject = Trueenter_another_subject = True while enter_another_subject:while enter_another_subject: subject = input('Type another subject: ')subject = input('Type another subject: ') subjesubject = subject.capitalize()ct = subject.capitalize() if not subject in subjects_list:if not subject in subjects_list: subjects_list.append(subject)subjects_list.append(subject) subject_hour_count[subject] = MAX_HOUR_PER_SUBJECTsubject_hour_count[subject] = MAX_HOUR_PER_SUBJECT else:else: print(f'Youprint(f'You\\'ve already type {subject} in list.')'ve already type {subject} in list.') question = input('Enter another subject (type "n" to exit)?')question = input('Enter another subject (type "n" to exit)?') if question.lower() == 'n':if question.lower() == 'n': enter_another_subject = Falseenter_another_subject = False def fill_out_subjects_list():def fill_out_subjects_list(): """Ask user subjects and fill in subjects list""""""Ask user subjects and fill in subjects list""" subjects = input('Type asubjects = input('Type all subjects you want add in subjects listll subjects you want add in subjects list\\
and separate them by comma: ') # we collect all subjectsand separate them by comma: ') # we collect all subjects the_subjects = subjects.replace(', ', ',') # remove space after commathe_subjects = subjects.replace(', ', ',') # remove space after comma # Split all subjects in order to put them into a list# Split all subjects in order to put them into a list the_subjects = thethe_subjects = the_subjects.split(',')_subjects.split(',') for subject in the_subjects:for subject in the_subjects: subject = subject.capitalize()subject = subject.capitalize() if not subject in subjects_list:if not subject in subjects_list: subjects_list.append(subject)subjects_list.append(subject) subject_hour_count[subject] = MAX_HOUR_PER_SUBJECTsubject_hour_count[subject] = MAX_HOUR_PER_SUBJECT def ask_hour():def ask_hour(): """Ask hour to user""""""Ask hour to user""" print(f'Subjects list: {subjects_list}')print(f'Subjects list: {subjects_list}') print(f'Planning time: {start_hour}hprint(f'Planning time: {start_hour}h--{next_hour}h'){next_hour}h') user_answer = input('Whatuser_answer = input('What\\'s subject do you want put here? ')'s subject do you want put here? ')
return user_answerreturn user_answer def fill_in_timetable():def fill_in_timetable(): """Dis"""Display an hour & ask user which subject he want to put there"""play an hour & ask user which subject he want to put there""" global start_hourglobal start_hour global next_hourglobal next_hour for day in school_days:for day in school_days: # Reset start and next hour# Reset start and next hour the_hour = {}the_hour = {} time = 0time = 0 start_hour = 8 # we suppose that schoolstart_hour = 8 # we suppose that school start at 8.amstart at 8.am next_hour = 9next_hour = 9 print('print('\\nn------------------------------------------------------')') print(f'{day.capitalize()} timetable')print(f'{day.capitalize()} timetable') print('print('------------------------------------------------------\\n')n') while time < 4: # Suppose we've 4hours course/day (you can while time < 4: # Suppose we've 4hours course/day (you can change itchange it))
hour_format = f'{start_hour}hhour_format = f'{start_hour}h--{next_hour}h' # format time slot{next_hour}h' # format time slot # it's represent 8 hours/per day for school# it's represent 8 hours/per day for school if time == 2: # if it's a midday (12.am), make a breakif time == 2: # if it's a midday (12.am), make a break # Add a break in timetable with 'Break # Add a break in timetable with 'Break time' as inscriptiontime' as inscription subject_per_slot[hour_format] = ['Break time']subject_per_slot[hour_format] = ['Break time'] # Add hour format while making sure we avoid duplicate# Add hour format while making sure we avoid duplicate if not hour_format in time_slot_list:if not hour_format in time_slot_list: time_slot_list.append('houtime_slot_list.append('hour_format')r_format') else:else: chosen_subject = ask_hour().capitalize()chosen_subject = ask_hour().capitalize() print(f'start_hour: {start_hour}')print(f'start_hour: {start_hour}') pprint(f'next_hour: {next_hour}')rint(f'next_hour: {next_hour}') # Check that subject chosen by user is in subjects li# Check that subject chosen by user is in subjects listst while not chosen_subject in subjects_list:while not chosen_subject in subjects_list: print(f'{chosen_subject} is not in subjects list.')print(f'{chosen_subject} is not in subjects list.') print('Choose another subject.')print('Choose another subject.') chosen_suchosen_subject = ask_hour().capitalize()bject = ask_hour().capitalize() # Add hour format while making sure we avoid duplicate# Add hour format while making sure we avoid duplicate
if not hour_format in time_slot_list:if not hour_format in time_slot_list: time_slot_list.append(hour_format)time_slot_list.append(hour_format) subject_per_slot[hour_format] = [chosen_subject]subject_per_slot[hour_format] = [chosen_subject] else:else: subject_per_slot[hsubject_per_slot[hour_format] += [chosen_subject]our_format] += [chosen_subject] # Check that chosen subject max hours didn't reached# Check that chosen subject max hours didn't reached for subject, max_hour in subject_hour_count.items():for subject, max_hour in subject_hour_count.items(): if chosen_subject == if chosen_subject == subject:subject: # remove one hour on subject max hour# remove one hour on subject max hour subject_hour_countsubject_hour_count[chosen_subject] = max_hour [chosen_subject] = max_hour -- 11 # go to next hour# go to next hour start_hour += 1 start_hour += 1 next_hour += 1next_hour += 1 time += 1time += 1 fill_fill_out_subjects_list()out_subjects_list() fill_in_timetable()fill_in_timetable() print(f'Subject per slot: {subject_per_slot}')print(f'Subject per slot: {subject_per_slot}') timetable_path = pathltimetable_path = pathlib.Path.cwd() / 'timetable.csv'ib.Path.cwd() / 'timetable.csv' # Now, let's write process to save timetable into a csv file# Now, let's write process to save timetable into a csv file
with open(timetable_path, 'w') as timetable_file:with open(timetable_path, 'w') as timetable_file: timetable_writitimetable_writing = csv.writer(timetable_file)ng = csv.writer(timetable_file) # Write headers into csv file# Write headers into csv file csv_headers = ['Hours']csv_headers = ['Hours'] csv_headers.extend(school_days)csv_headers.extend(school_days) timetabltimetable_writing.writerow(csv_headers)e_writing.writerow(csv_headers) # Write content into csv file# Write content into csv file for time_slot, concerned_subfor time_slot, concerned_subjects in subject_per_slot.items():jects in subject_per_slot.items(): time_line = [time_slot]time_line = [time_slot] concerned_subjects_list = []concerned_subjects_list = [] if concerned_subjects == ['Break time']:if concerned_subjects == ['Break time']: for x in range(0, len(school_days)):for x in range(0, len(school_days)): concerned_subjects_list.append('Breakconcerned_subjects_list.append('Break time')time') else:else: concerned_subjects_list = concerned_subjectsconcerned_subjects_list = concerned_subjects final_line = time_line + concerned_subjects_listfinal_line = time_line + concerned_subjects_list timetable_writing.writerow(final_line)timetable_writing.writerow(final_line) print('Your timetable is ready')print('Your timetable is ready')

